// Â© Joseph Cameron - All Rights Reserved

#include <simpleglfw/buildinfo.h>

#include <gdk/glfw_window.h>

#ifdef JFC_TARGET_PLATFORM_Emscripten
#include <emscripten/bind.h>
#include <emscripten/emscripten.h>
#define GLFW_INCLUDE_ES2
#elif defined JFC_TARGET_PLATFORM_Linux || defined JFC_TARGET_PLATFORM_Windows
#define GLEW_STATIC
#include <GL/glew.h>
#endif

#include <GLFW/glfw3.h>

#include <algorithm>
#include <exception>
#include <functional>
#include <iostream>
#include <mutex>
#include <sstream>

static constexpr char TAG[] = "glfw_window";

static const unsigned char window_icon_rgba32[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x13, 0x00, 0x0d, 0x37, 0x18, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x37, 0x18, 0x00, 0x15, 0x43, 0x13, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x1a, 0x00, 0x13, 0x38, 0x0c, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x38, 0x0c, 0x00, 0x15, 0x3c, 0x1a, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x13, 0x00, 0x0d, 0x37, 0x18, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x2a, 0x0c, 0x00, 0x15, 0x37, 0x18, 0x00, 0x15, 0x43, 0x13, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x1d, 0x05, 0x93, 0x44, 0x1c, 0x06, 0xe9, 0x39, 0x13, 0x05, 0xe9, 0x39, 0x13, 0x05, 0xe9, 0x44, 0x1c, 0x06, 0xe9, 0x44, 0x1d, 0x05, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x08, 0x46, 0x1f, 0x01, 0xd4, 0x40, 0x19, 0x04, 0xe9, 0x39, 0x13, 0x05, 0xe9, 0x3a, 0x14, 0x05, 0xe9, 0x3a, 0x14, 0x05, 0xe9, 0x39, 0x13, 0x05, 0xe9, 0x40, 0x19, 0x04, 0xe9, 0x46, 0x1f, 0x01, 0xd4, 0x4b, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x1d, 0x05, 0x93, 0x44, 0x1c, 0x06, 0xe9, 0x39, 0x13, 0x05, 0xe9, 0x39, 0x13, 0x05, 0xe9, 0x44, 0x1c, 0x06, 0xe9, 0x44, 0x1d, 0x05, 0x93, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x05, 0xa6, 0x2d, 0x09, 0x04, 0xe7, 0x69, 0x3c, 0x04, 0xff, 0xc6, 0x95, 0x00, 0xff, 0xc7, 0x94, 0x00, 0xff, 0x72, 0x46, 0x03, 0xff, 0x39, 0x13, 0x04, 0xe7, 0x43, 0x1d, 0x06, 0xa6, 0x43, 0x1d, 0x06, 0xa6, 0x43, 0x1d, 0x06, 0xa6, 0x45, 0x1e, 0x01, 0xa6, 0x3b, 0x18, 0x0c, 0xaf, 0x18, 0x0a, 0x35, 0xff, 0x85, 0x60, 0x1b, 0xff, 0xcb, 0x97, 0x00, 0xff, 0xc1, 0x8e, 0x00, 0xff, 0xc1, 0x8e, 0x00, 0xff, 0xcb, 0x97, 0x00, 0xff, 0x85, 0x60, 0x1b, 0xff, 0x18, 0x0a, 0x35, 0xff, 0x3b, 0x18, 0x0c, 0xaf, 0x45, 0x1e, 0x01, 0xa6, 0x43, 0x1d, 0x06, 0xa6, 0x43, 0x1d, 0x06, 0xa6, 0x43, 0x1d, 0x06, 0xa6, 0x39, 0x13, 0x04, 0xe7, 0x72, 0x46, 0x03, 0xff, 0xc7, 0x94, 0x00, 0xff, 0xc6, 0x95, 0x00, 0xff, 0x69, 0x3c, 0x04, 0xff, 0x2d, 0x09, 0x04, 0xe7, 0x43, 0x1e, 0x05, 0xa6, 0x45, 0x1d, 0x07, 0xff, 0x65, 0x3a, 0x00, 0xff, 0xb7, 0x85, 0x00, 0xff, 0xff, 0xda, 0x00, 0xff, 0xff, 0xe6, 0x00, 0xff, 0x8f, 0x5e, 0x00, 0xff, 0x38, 0x0d, 0x00, 0xff, 0x4d, 0x1e, 0x00, 0xff, 0x4d, 0x1e, 0x00, 0xff, 0x4d, 0x1e, 0x00, 0xff, 0x4f, 0x1e, 0x00, 0xff, 0x42, 0x19, 0x07, 0xff, 0x00, 0x00, 0x52, 0xff, 0xa9, 0x87, 0x23, 0xff, 0xff, 0xe2, 0x00, 0xff, 0xff, 0xd3, 0x00, 0xff, 0xff, 0xd3, 0x00, 0xff, 0xff, 0xe2, 0x00, 0xff, 0xa9, 0x87, 0x23, 0xff, 0x00, 0x00, 0x52, 0xff, 0x42, 0x19, 0x07, 0xff, 0x4f, 0x1e, 0x00, 0xff, 0x4d, 0x1e, 0x00, 0xff, 0x4d, 0x1e, 0x00, 0xff, 0x4d, 0x1e, 0x00, 0xff, 0x38, 0x0d, 0x00, 0xff, 0x8f, 0x5e, 0x00, 0xff, 0xff, 0xe6, 0x00, 0xff, 0xff, 0xda, 0x00, 0xff, 0xb7, 0x85, 0x00, 0xff, 0x65, 0x3a, 0x00, 0xff, 0x45, 0x1d, 0x07, 0xff, 0x3a, 0x14, 0x05, 0xff, 0xc3, 0x94, 0x00, 0xff, 0xff, 0xdd, 0x00, 0xff, 0xfb, 0xc9, 0x00, 0xff, 0xf1, 0xbf, 0x00, 0xff, 0x78, 0x53, 0x0f, 0xff, 0x30, 0x16, 0x12, 0xff, 0x3c, 0x21, 0x13, 0xff, 0x3c, 0x21, 0x13, 0xff, 0x3c, 0x21, 0x13, 0xff, 0x3e, 0x22, 0x0f, 0xff, 0x36, 0x1d, 0x18, 0xff, 0x00, 0x00, 0x4e, 0xff, 0xa2, 0x82, 0x31, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xfd, 0xca, 0x00, 0xff, 0xfd, 0xca, 0x00, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xa2, 0x82, 0x31, 0xff, 0x00, 0x00, 0x4e, 0xff, 0x36, 0x1d, 0x18, 0xff, 0x3e, 0x22, 0x0f, 0xff, 0x3c, 0x21, 0x13, 0xff, 0x3c, 0x21, 0x13, 0xff, 0x3c, 0x21, 0x13, 0xff, 0x30, 0x16, 0x12, 0xff, 0x78, 0x53, 0x0f, 0xff, 0xf1, 0xbf, 0x00, 0xff, 0xfb, 0xc9, 0x00, 0xff, 0xff, 0xdd, 0x00, 0xff, 0xc3, 0x94, 0x00, 0xff, 0x3a, 0x14, 0x05, 0xff, 0x3a, 0x14, 0x00, 0xff, 0xb8, 0x9f, 0x70, 0xff, 0xff, 0xfb, 0xb8, 0xff, 0xe0, 0xd1, 0xa0, 0xff, 0x2a, 0x1f, 0x50, 0xff, 0x00, 0x2b, 0x74, 0xff, 0x00, 0x4b, 0x95, 0xff, 0x00, 0x47, 0x90, 0xff, 0x00, 0x47, 0x90, 0xff, 0x00, 0x47, 0x90, 0xff, 0x00, 0x4a, 0x93, 0xff, 0x00, 0x3f, 0x8a, 0xff, 0x00, 0x00, 0x52, 0xff, 0xa0, 0x90, 0x88, 0xff, 0xff, 0xf3, 0xad, 0xff, 0xf5, 0xe3, 0xa8, 0xff, 0xf5, 0xe3, 0xa8, 0xff, 0xff, 0xf3, 0xad, 0xff, 0xa0, 0x90, 0x88, 0xff, 0x00, 0x00, 0x52, 0xff, 0x00, 0x3f, 0x8a, 0xff, 0x00, 0x4a, 0x93, 0xff, 0x00, 0x47, 0x90, 0xff, 0x00, 0x47, 0x90, 0xff, 0x00, 0x47, 0x90, 0xff, 0x00, 0x4b, 0x95, 0xff, 0x00, 0x2b, 0x74, 0xff, 0x2a, 0x1f, 0x50, 0xff, 0xe0, 0xd1, 0xa0, 0xff, 0xff, 0xfb, 0xb8, 0xff, 0xb8, 0x9f, 0x70, 0xff, 0x3a, 0x14, 0x00, 0xff, 0x3b, 0x13, 0x00, 0xff, 0xb7, 0xa0, 0x7d, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xdd, 0xd1, 0xb3, 0xff, 0x0b, 0x03, 0x55, 0xff, 0x00, 0x4a, 0xaf, 0xff, 0x00, 0x90, 0xe9, 0xff, 0x00, 0x86, 0xe7, 0xff, 0x00, 0x86, 0xe7, 0xff, 0x00, 0x86, 0xe7, 0xff, 0x00, 0x8c, 0xe9, 0xff, 0x00, 0x78, 0xd9, 0xff, 0x00, 0x01, 0x58, 0xff, 0xa2, 0x90, 0x92, 0xff, 0xff, 0xf7, 0xc5, 0xff, 0xf3, 0xe7, 0xbe, 0xff, 0xf3, 0xe7, 0xbe, 0xff, 0xff, 0xf7, 0xc5, 0xff, 0xa2, 0x90, 0x92, 0xff, 0x00, 0x01, 0x58, 0xff, 0x00, 0x78, 0xd9, 0xff, 0x00, 0x8c, 0xe9, 0xff, 0x00, 0x86, 0xe7, 0xff, 0x00, 0x86, 0xe7, 0xff, 0x00, 0x86, 0xe7, 0xff, 0x00, 0x90, 0xe9, 0xff, 0x00, 0x4a, 0xaf, 0xff, 0x0b, 0x03, 0x55, 0xff, 0xdd, 0xd1, 0xb3, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xb7, 0xa0, 0x7d, 0xff, 0x3b, 0x13, 0x00, 0xff, 0x3b, 0x13, 0x00, 0xff, 0xb7, 0xa0, 0x7d, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xde, 0xd2, 0xb3, 0xff, 0x17, 0x0a, 0x52, 0xff, 0x00, 0x61, 0xc4, 0xff, 0x00, 0xb1, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xad, 0xff, 0xff, 0x00, 0x95, 0xf8, 0xff, 0x00, 0x02, 0x5b, 0xff, 0xa2, 0x8f, 0x91, 0xff, 0xff, 0xf7, 0xc5, 0xff, 0xf3, 0xe7, 0xbe, 0xff, 0xf3, 0xe7, 0xbe, 0xff, 0xff, 0xf7, 0xc5, 0xff, 0xa2, 0x8f, 0x91, 0xff, 0x00, 0x02, 0x5b, 0xff, 0x00, 0x95, 0xf8, 0xff, 0x00, 0xad, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xb1, 0xff, 0xff, 0x00, 0x61, 0xc4, 0xff, 0x17, 0x0a, 0x52, 0xff, 0xde, 0xd2, 0xb3, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xb7, 0xa0, 0x7d, 0xff, 0x3b, 0x13, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0xb8, 0x9e, 0x70, 0xff, 0xff, 0xfb, 0xb7, 0xff, 0xe0, 0xce, 0x9f, 0xff, 0x17, 0x0a, 0x50, 0xff, 0x00, 0x5e, 0xc1, 0xff, 0x00, 0xab, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa7, 0xff, 0xff, 0x00, 0x90, 0xf2, 0xff, 0x00, 0x02, 0x5b, 0xff, 0xa3, 0x8d, 0x84, 0xff, 0xff, 0xf3, 0xad, 0xff, 0xf5, 0xe3, 0xa8, 0xff, 0xf5, 0xe3, 0xa8, 0xff, 0xff, 0xf3, 0xad, 0xff, 0xa3, 0x8d, 0x84, 0xff, 0x00, 0x02, 0x5b, 0xff, 0x00, 0x90, 0xf2, 0xff, 0x00, 0xa7, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xab, 0xff, 0xff, 0x00, 0x5e, 0xc1, 0xff, 0x17, 0x0a, 0x50, 0xff, 0xe0, 0xce, 0x9f, 0xff, 0xff, 0xfb, 0xb7, 0xff, 0xb8, 0x9e, 0x70, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x05, 0xff, 0xbd, 0x8e, 0x00, 0xff, 0xff, 0xdf, 0x00, 0xff, 0xe7, 0xb8, 0x05, 0xff, 0x17, 0x09, 0x44, 0xff, 0x00, 0x61, 0xc9, 0xff, 0x00, 0xaf, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xab, 0xff, 0xff, 0x00, 0x94, 0xf7, 0xff, 0x00, 0x03, 0x62, 0xff, 0xa8, 0x7c, 0x24, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xfd, 0xca, 0x00, 0xff, 0xfd, 0xca, 0x00, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xa8, 0x7c, 0x24, 0xff, 0x00, 0x03, 0x62, 0xff, 0x00, 0x94, 0xf7, 0xff, 0x00, 0xab, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xaf, 0xff, 0xff, 0x00, 0x61, 0xc9, 0xff, 0x17, 0x09, 0x44, 0xff, 0xe7, 0xb8, 0x05, 0xff, 0xff, 0xdf, 0x00, 0xff, 0xbd, 0x8e, 0x00, 0xff, 0x3b, 0x14, 0x05, 0xff, 0x3b, 0x15, 0x06, 0xff, 0xbd, 0x8c, 0x00, 0xff, 0xff, 0xdb, 0x00, 0xff, 0xe8, 0xb4, 0x00, 0xff, 0x17, 0x0a, 0x46, 0xff, 0x00, 0x3d, 0x9e, 0xff, 0x00, 0x72, 0xc7, 0xff, 0x00, 0x6b, 0xc3, 0xff, 0x00, 0x6b, 0xc3, 0xff, 0x00, 0x6b, 0xc3, 0xff, 0x00, 0x70, 0xc5, 0xff, 0x00, 0x60, 0xba, 0xff, 0x00, 0x01, 0x5e, 0xff, 0xa8, 0x7c, 0x16, 0xff, 0xff, 0xd4, 0x00, 0xff, 0xfe, 0xc6, 0x00, 0xff, 0xfe, 0xc6, 0x00, 0xff, 0xff, 0xd4, 0x00, 0xff, 0xa8, 0x7c, 0x16, 0xff, 0x00, 0x01, 0x5e, 0xff, 0x00, 0x60, 0xba, 0xff, 0x00, 0x70, 0xc5, 0xff, 0x00, 0x6b, 0xc3, 0xff, 0x00, 0x6b, 0xc3, 0xff, 0x00, 0x6b, 0xc3, 0xff, 0x00, 0x72, 0xc7, 0xff, 0x00, 0x3d, 0x9e, 0xff, 0x17, 0x0a, 0x46, 0xff, 0xe8, 0xb4, 0x00, 0xff, 0xff, 0xdb, 0x00, 0xff, 0xbd, 0x8c, 0x00, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3a, 0x14, 0x06, 0xff, 0xbe, 0x8f, 0x00, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xe9, 0xb9, 0x00, 0xff, 0x17, 0x0c, 0x48, 0xff, 0x00, 0x29, 0x85, 0xff, 0x00, 0x52, 0xa4, 0xff, 0x00, 0x4d, 0x9e, 0xff, 0x00, 0x4d, 0x9e, 0xff, 0x00, 0x4d, 0x9e, 0xff, 0x00, 0x50, 0xa1, 0xff, 0x00, 0x44, 0x97, 0xff, 0x00, 0x00, 0x5a, 0xff, 0xa8, 0x81, 0x1e, 0xff, 0xff, 0xd9, 0x00, 0xff, 0xff, 0xcb, 0x00, 0xff, 0xff, 0xcb, 0x00, 0xff, 0xff, 0xd9, 0x00, 0xff, 0xa8, 0x81, 0x1e, 0xff, 0x00, 0x00, 0x5a, 0xff, 0x00, 0x44, 0x97, 0xff, 0x00, 0x50, 0xa1, 0xff, 0x00, 0x4d, 0x9e, 0xff, 0x00, 0x4d, 0x9e, 0xff, 0x00, 0x4d, 0x9e, 0xff, 0x00, 0x52, 0xa4, 0xff, 0x00, 0x29, 0x85, 0xff, 0x17, 0x0c, 0x48, 0xff, 0xe9, 0xb9, 0x00, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xbe, 0x8f, 0x00, 0xff, 0x3a, 0x14, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0xb9, 0x88, 0x00, 0xff, 0xff, 0xd5, 0x00, 0xff, 0xe3, 0xaf, 0x00, 0xff, 0x14, 0x0b, 0x48, 0xff, 0x00, 0x26, 0x84, 0xff, 0x00, 0x4c, 0xa0, 0xff, 0x00, 0x47, 0x9b, 0xff, 0x00, 0x47, 0x9a, 0xff, 0x00, 0x47, 0x9a, 0xff, 0x00, 0x4a, 0x9d, 0xff, 0x00, 0x3f, 0x94, 0xff, 0x00, 0x00, 0x5a, 0xff, 0xa3, 0x7a, 0x1f, 0xff, 0xff, 0xcf, 0x00, 0xff, 0xf9, 0xc1, 0x00, 0xff, 0xf9, 0xc1, 0x00, 0xff, 0xff, 0xcf, 0x00, 0xff, 0xa3, 0x7a, 0x1f, 0xff, 0x00, 0x00, 0x5a, 0xff, 0x00, 0x3f, 0x94, 0xff, 0x00, 0x4a, 0x9d, 0xff, 0x00, 0x47, 0x9a, 0xff, 0x00, 0x47, 0x9a, 0xff, 0x00, 0x47, 0x9b, 0xff, 0x00, 0x4c, 0xa0, 0xff, 0x00, 0x26, 0x84, 0xff, 0x14, 0x0b, 0x48, 0xff, 0xe3, 0xaf, 0x00, 0xff, 0xff, 0xd5, 0x00, 0xff, 0xb9, 0x88, 0x00, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3d, 0x18, 0x06, 0xff, 0x9b, 0x5c, 0x00, 0xff, 0xdc, 0x8a, 0x00, 0xff, 0xb7, 0x72, 0x04, 0xff, 0x08, 0x05, 0x4e, 0xff, 0x00, 0x00, 0x5b, 0xff, 0x00, 0x00, 0x5c, 0xff, 0x00, 0x00, 0x5a, 0xff, 0x00, 0x00, 0x54, 0xff, 0x00, 0x00, 0x53, 0xff, 0x00, 0x00, 0x53, 0xff, 0x00, 0x00, 0x53, 0xff, 0x00, 0x00, 0x57, 0xff, 0x84, 0x51, 0x24, 0xff, 0xe1, 0x8c, 0x00, 0xff, 0xd0, 0x83, 0x00, 0xff, 0xd0, 0x83, 0x00, 0xff, 0xe1, 0x8c, 0x00, 0xff, 0x84, 0x51, 0x24, 0xff, 0x00, 0x00, 0x57, 0xff, 0x00, 0x00, 0x53, 0xff, 0x00, 0x00, 0x53, 0xff, 0x00, 0x00, 0x53, 0xff, 0x00, 0x00, 0x54, 0xff, 0x00, 0x00, 0x5a, 0xff, 0x00, 0x00, 0x5c, 0xff, 0x00, 0x00, 0x5b, 0xff, 0x08, 0x05, 0x4e, 0xff, 0xb7, 0x72, 0x04, 0xff, 0xdc, 0x8a, 0x00, 0xff, 0x9b, 0x5c, 0x00, 0xff, 0x3d, 0x18, 0x06, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x97, 0x55, 0x00, 0xff, 0xcf, 0x7b, 0x00, 0xff, 0xbc, 0x70, 0x00, 0xff, 0x84, 0x4f, 0x21, 0xff, 0x9a, 0x6e, 0x21, 0xff, 0xa9, 0x81, 0x16, 0xff, 0xa7, 0x80, 0x2a, 0xff, 0xa1, 0x91, 0x88, 0xff, 0xa1, 0x93, 0x95, 0xff, 0xa1, 0x93, 0x95, 0xff, 0xa1, 0x92, 0x88, 0xff, 0xab, 0x89, 0x2d, 0xff, 0x81, 0x51, 0x06, 0xff, 0x6a, 0x33, 0x03, 0xff, 0x6e, 0x39, 0x05, 0xff, 0x6e, 0x39, 0x05, 0xff, 0x6a, 0x33, 0x03, 0xff, 0x81, 0x51, 0x06, 0xff, 0xab, 0x89, 0x2d, 0xff, 0xa1, 0x92, 0x88, 0xff, 0xa1, 0x93, 0x95, 0xff, 0xa1, 0x93, 0x95, 0xff, 0xa1, 0x91, 0x88, 0xff, 0xa7, 0x80, 0x2a, 0xff, 0xa9, 0x81, 0x16, 0xff, 0x9a, 0x6e, 0x21, 0xff, 0x84, 0x4f, 0x21, 0xff, 0xbc, 0x70, 0x00, 0xff, 0xcf, 0x7b, 0x00, 0xff, 0x97, 0x55, 0x00, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x9c, 0x5a, 0x00, 0xff, 0xd4, 0x81, 0x00, 0xff, 0xcb, 0x7b, 0x00, 0xff, 0xd6, 0x7f, 0x00, 0xff, 0xff, 0xbe, 0x00, 0xff, 0xff, 0xe2, 0x00, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xfc, 0xb4, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xfd, 0xb4, 0xff, 0xff, 0xe9, 0x00, 0xff, 0x82, 0x55, 0x00, 0xff, 0x20, 0x00, 0x04, 0xff, 0x32, 0x0f, 0x06, 0xff, 0x32, 0x0f, 0x06, 0xff, 0x20, 0x00, 0x04, 0xff, 0x82, 0x55, 0x00, 0xff, 0xff, 0xe9, 0x00, 0xff, 0xff, 0xfd, 0xb4, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xfc, 0xb4, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xe2, 0x00, 0xff, 0xff, 0xbe, 0x00, 0xff, 0xd6, 0x7f, 0x00, 0xff, 0xcb, 0x7b, 0x00, 0xff, 0xd4, 0x81, 0x00, 0xff, 0x9c, 0x5a, 0x00, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x90, 0x52, 0x01, 0xff, 0xc1, 0x75, 0x00, 0xff, 0xb9, 0x6e, 0x00, 0xff, 0xb8, 0x6c, 0x00, 0xff, 0xdd, 0x9f, 0x00, 0xff, 0xf1, 0xbd, 0x00, 0xff, 0xee, 0xbb, 0x00, 0xff, 0xe7, 0xd2, 0x99, 0xff, 0xe6, 0xd5, 0xad, 0xff, 0xe6, 0xd5, 0xad, 0xff, 0xe8, 0xd2, 0x99, 0xff, 0xf4, 0xc1, 0x00, 0xff, 0x8a, 0x5c, 0x00, 0xff, 0x48, 0x22, 0x05, 0xff, 0x55, 0x2d, 0x06, 0xff, 0x55, 0x2d, 0x06, 0xff, 0x48, 0x22, 0x05, 0xff, 0x8a, 0x5c, 0x00, 0xff, 0xf4, 0xc1, 0x00, 0xff, 0xe8, 0xd2, 0x99, 0xff, 0xe6, 0xd5, 0xad, 0xff, 0xe6, 0xd5, 0xad, 0xff, 0xe7, 0xd2, 0x99, 0xff, 0xee, 0xbb, 0x00, 0xff, 0xf1, 0xbd, 0x00, 0xff, 0xdd, 0x9f, 0x00, 0xff, 0xb8, 0x6c, 0x00, 0xff, 0xb9, 0x6e, 0x00, 0xff, 0xc1, 0x75, 0x00, 0xff, 0x90, 0x52, 0x01, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x43, 0x1d, 0x06, 0xff, 0x46, 0x20, 0x06, 0xff, 0x48, 0x21, 0x06, 0xff, 0x4a, 0x21, 0x06, 0xff, 0x50, 0x26, 0x02, 0xff, 0x56, 0x29, 0x00, 0xff, 0x58, 0x29, 0x00, 0xff, 0x57, 0x2a, 0x00, 0xff, 0x56, 0x2c, 0x0b, 0xff, 0x56, 0x2c, 0x0e, 0xff, 0x56, 0x2c, 0x0e, 0xff, 0x55, 0x2a, 0x0b, 0xff, 0x4e, 0x21, 0x00, 0xff, 0xbf, 0x8c, 0x00, 0xff, 0xff, 0xcc, 0x00, 0xff, 0xf7, 0xc1, 0x00, 0xff, 0xf7, 0xc1, 0x00, 0xff, 0xff, 0xcc, 0x00, 0xff, 0xbf, 0x8c, 0x00, 0xff, 0x4e, 0x21, 0x00, 0xff, 0x55, 0x2a, 0x0b, 0xff, 0x56, 0x2c, 0x0e, 0xff, 0x56, 0x2c, 0x0e, 0xff, 0x56, 0x2c, 0x0b, 0xff, 0x57, 0x2a, 0x00, 0xff, 0x58, 0x29, 0x00, 0xff, 0x56, 0x29, 0x00, 0xff, 0x50, 0x26, 0x02, 0xff, 0x4a, 0x21, 0x06, 0xff, 0x48, 0x21, 0x06, 0xff, 0x46, 0x20, 0x06, 0xff, 0x43, 0x1d, 0x06, 0xff, 0x40, 0x1a, 0x06, 0xff, 0x77, 0x41, 0x04, 0xff, 0x9e, 0x5b, 0x00, 0xff, 0x87, 0x4d, 0x07, 0xff, 0x1d, 0x0a, 0x31, 0xff, 0x00, 0x23, 0x5c, 0xff, 0x00, 0x38, 0x6d, 0xff, 0x00, 0x31, 0x65, 0xff, 0x00, 0x30, 0x5e, 0xff, 0x00, 0x30, 0x5d, 0xff, 0x00, 0x2f, 0x5d, 0xff, 0x00, 0x2f, 0x5f, 0xff, 0x00, 0x34, 0x6f, 0xff, 0x5c, 0x52, 0x2c, 0xff, 0x96, 0x62, 0x00, 0xff, 0x8d, 0x60, 0x00, 0xff, 0x8d, 0x60, 0x00, 0xff, 0x96, 0x62, 0x00, 0xff, 0x5c, 0x52, 0x2c, 0xff, 0x00, 0x34, 0x6f, 0xff, 0x00, 0x2f, 0x5f, 0xff, 0x00, 0x2f, 0x5d, 0xff, 0x00, 0x30, 0x5d, 0xff, 0x00, 0x30, 0x5e, 0xff, 0x00, 0x31, 0x65, 0xff, 0x00, 0x38, 0x6d, 0xff, 0x00, 0x23, 0x5c, 0xff, 0x1d, 0x0a, 0x31, 0xff, 0x87, 0x4d, 0x07, 0xff, 0x9e, 0x5b, 0x00, 0xff, 0x77, 0x41, 0x04, 0xff, 0x40, 0x1a, 0x06, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x9e, 0x5c, 0x00, 0xff, 0xe1, 0x8a, 0x00, 0xff, 0xbc, 0x72, 0x02, 0xff, 0x0d, 0x04, 0x4c, 0xff, 0x00, 0x2e, 0x8f, 0xff, 0x00, 0x62, 0xbe, 0xff, 0x00, 0x70, 0xce, 0xff, 0x00, 0x6f, 0xce, 0xff, 0x00, 0x6f, 0xce, 0xff, 0x00, 0x70, 0xce, 0xff, 0x00, 0x6d, 0xcd, 0xff, 0x00, 0x58, 0xb8, 0xff, 0x17, 0x26, 0x3e, 0xff, 0x3b, 0x0c, 0x00, 0xff, 0x35, 0x11, 0x05, 0xff, 0x35, 0x11, 0x05, 0xff, 0x3b, 0x0c, 0x00, 0xff, 0x17, 0x26, 0x3e, 0xff, 0x00, 0x58, 0xb8, 0xff, 0x00, 0x6d, 0xcd, 0xff, 0x00, 0x70, 0xce, 0xff, 0x00, 0x6f, 0xce, 0xff, 0x00, 0x6f, 0xce, 0xff, 0x00, 0x70, 0xce, 0xff, 0x00, 0x62, 0xbe, 0xff, 0x00, 0x2e, 0x8f, 0xff, 0x0d, 0x04, 0x4c, 0xff, 0xbc, 0x72, 0x02, 0xff, 0xe1, 0x8a, 0x00, 0xff, 0x9e, 0x5c, 0x00, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x99, 0x58, 0x00, 0xff, 0xd7, 0x83, 0x00, 0xff, 0xb4, 0x6d, 0x04, 0xff, 0x12, 0x06, 0x47, 0xff, 0x00, 0x28, 0x81, 0xff, 0x00, 0x72, 0xca, 0xff, 0x00, 0xa6, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa6, 0xff, 0xff, 0x00, 0x9c, 0xff, 0xff, 0x00, 0x59, 0xb2, 0xff, 0x26, 0x2a, 0x37, 0xff, 0x4a, 0x1a, 0x00, 0xff, 0x44, 0x1e, 0x06, 0xff, 0x44, 0x1e, 0x06, 0xff, 0x4a, 0x1a, 0x00, 0xff, 0x26, 0x2a, 0x37, 0xff, 0x00, 0x59, 0xb2, 0xff, 0x00, 0x9c, 0xff, 0xff, 0x00, 0xa6, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa6, 0xff, 0xff, 0x00, 0x72, 0xca, 0xff, 0x00, 0x28, 0x81, 0xff, 0x12, 0x06, 0x47, 0xff, 0xb4, 0x6d, 0x04, 0xff, 0xd7, 0x83, 0x00, 0xff, 0x99, 0x58, 0x00, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x99, 0x58, 0x00, 0xff, 0xd7, 0x83, 0x00, 0xff, 0xb4, 0x6d, 0x04, 0xff, 0x12, 0x06, 0x47, 0xff, 0x00, 0x28, 0x81, 0xff, 0x00, 0x71, 0xc9, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0x99, 0xfb, 0xff, 0x00, 0x59, 0xb2, 0xff, 0x26, 0x2a, 0x37, 0xff, 0x4a, 0x1a, 0x00, 0xff, 0x44, 0x1e, 0x06, 0xff, 0x44, 0x1e, 0x06, 0xff, 0x4a, 0x1a, 0x00, 0xff, 0x26, 0x2a, 0x37, 0xff, 0x00, 0x59, 0xb2, 0xff, 0x00, 0x99, 0xfb, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa0, 0xff, 0xff, 0x00, 0xa3, 0xff, 0xff, 0x00, 0x71, 0xc9, 0xff, 0x00, 0x28, 0x81, 0xff, 0x12, 0x06, 0x47, 0xff, 0xb4, 0x6d, 0x04, 0xff, 0xd7, 0x83, 0x00, 0xff, 0x99, 0x58, 0x00, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x99, 0x58, 0x00, 0xff, 0xd7, 0x83, 0x00, 0xff, 0xb4, 0x6d, 0x04, 0xff, 0x12, 0x06, 0x47, 0xff, 0x00, 0x28, 0x81, 0xff, 0x00, 0x73, 0xcb, 0xff, 0x00, 0xa9, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x9e, 0xff, 0xff, 0x00, 0x59, 0xb2, 0xff, 0x26, 0x2a, 0x37, 0xff, 0x4a, 0x1a, 0x00, 0xff, 0x44, 0x1e, 0x06, 0xff, 0x44, 0x1e, 0x06, 0xff, 0x4a, 0x1a, 0x00, 0xff, 0x26, 0x2a, 0x37, 0xff, 0x00, 0x59, 0xb2, 0xff, 0x00, 0x9e, 0xff, 0xff, 0x00, 0xa9, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa5, 0xff, 0xff, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x73, 0xcb, 0xff, 0x00, 0x28, 0x81, 0xff, 0x12, 0x06, 0x47, 0xff, 0xb4, 0x6d, 0x04, 0xff, 0xd7, 0x83, 0x00, 0xff, 0x99, 0x58, 0x00, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x99, 0x58, 0x00, 0xff, 0xd7, 0x83, 0x00, 0xff, 0xb3, 0x6c, 0x05, 0xff, 0x07, 0x00, 0x4a, 0xff, 0x00, 0x24, 0x89, 0xff, 0x00, 0x62, 0xc4, 0xff, 0x00, 0x80, 0xe6, 0xff, 0x00, 0x7d, 0xe0, 0xff, 0x00, 0x7d, 0xdf, 0xff, 0x00, 0x7f, 0xe0, 0xff, 0x00, 0x79, 0xdb, 0xff, 0x00, 0x50, 0xae, 0xff, 0x1b, 0x24, 0x34, 0xff, 0x41, 0x11, 0x00, 0xff, 0x3c, 0x15, 0x00, 0xff, 0x3c, 0x15, 0x00, 0xff, 0x41, 0x11, 0x00, 0xff, 0x1b, 0x24, 0x34, 0xff, 0x00, 0x50, 0xae, 0xff, 0x00, 0x79, 0xdb, 0xff, 0x00, 0x7f, 0xe0, 0xff, 0x00, 0x7d, 0xdf, 0xff, 0x00, 0x7d, 0xe0, 0xff, 0x00, 0x80, 0xe6, 0xff, 0x00, 0x62, 0xc4, 0xff, 0x00, 0x24, 0x89, 0xff, 0x07, 0x00, 0x4a, 0xff, 0xb3, 0x6c, 0x05, 0xff, 0xd7, 0x83, 0x00, 0xff, 0x99, 0x58, 0x00, 0xff, 0x3e, 0x19, 0x06, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x99, 0x58, 0x00, 0xff, 0xd6, 0x82, 0x00, 0xff, 0xb5, 0x6e, 0x02, 0xff, 0x25, 0x15, 0x43, 0xff, 0x00, 0x3c, 0x80, 0xff, 0x00, 0x5d, 0x98, 0xff, 0x00, 0x56, 0x93, 0xff, 0x00, 0x58, 0x9f, 0xff, 0x00, 0x58, 0xa0, 0xff, 0x00, 0x58, 0x9f, 0xff, 0x00, 0x59, 0xa0, 0xff, 0x00, 0x5e, 0xaa, 0xff, 0x34, 0x3e, 0x46, 0xff, 0x58, 0x2b, 0x0d, 0xff, 0x53, 0x2e, 0x14, 0xff, 0x53, 0x2e, 0x14, 0xff, 0x58, 0x2b, 0x0d, 0xff, 0x34, 0x3e, 0x46, 0xff, 0x00, 0x5e, 0xaa, 0xff, 0x00, 0x59, 0xa0, 0xff, 0x00, 0x58, 0x9f, 0xff, 0x00, 0x58, 0xa0, 0xff, 0x00, 0x58, 0x9f, 0xff, 0x00, 0x56, 0x93, 0xff, 0x00, 0x5d, 0x98, 0xff, 0x00, 0x3c, 0x80, 0xff, 0x25, 0x15, 0x43, 0xff, 0xb5, 0x6e, 0x02, 0xff, 0xd6, 0x82, 0x00, 0xff, 0x99, 0x58, 0x00, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x9d, 0x5b, 0x00, 0xff, 0xd2, 0x7e, 0x00, 0xff, 0xc7, 0x7c, 0x00, 0xff, 0xe4, 0xb1, 0x00, 0xff, 0xe8, 0xbd, 0x00, 0xff, 0xe6, 0xbc, 0x00, 0xff, 0xe5, 0xbf, 0x17, 0xff, 0xdd, 0xd7, 0xae, 0xff, 0xdb, 0xda, 0xbe, 0xff, 0xdc, 0xd8, 0xb3, 0xff, 0xdc, 0xd8, 0xb4, 0xff, 0xdc, 0xd9, 0xb5, 0xff, 0xe2, 0xd6, 0xac, 0xff, 0xe6, 0xd4, 0xa7, 0xff, 0xe4, 0xd5, 0xa8, 0xff, 0xe4, 0xd5, 0xa8, 0xff, 0xe6, 0xd4, 0xa7, 0xff, 0xe2, 0xd6, 0xac, 0xff, 0xdc, 0xd9, 0xb5, 0xff, 0xdc, 0xd8, 0xb4, 0xff, 0xdc, 0xd8, 0xb3, 0xff, 0xdb, 0xda, 0xbe, 0xff, 0xdd, 0xd7, 0xae, 0xff, 0xe5, 0xbf, 0x17, 0xff, 0xe6, 0xbc, 0x00, 0xff, 0xe8, 0xbd, 0x00, 0xff, 0xe4, 0xb1, 0x00, 0xff, 0xc7, 0x7c, 0x00, 0xff, 0xd2, 0x7e, 0x00, 0xff, 0x9d, 0x5b, 0x00, 0xff, 0x3d, 0x18, 0x05, 0xff, 0x47, 0x1e, 0x06, 0xff, 0x5b, 0x2d, 0x06, 0xff, 0x90, 0x51, 0x01, 0xff, 0xd8, 0x89, 0x00, 0xff, 0xff, 0xd5, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xff, 0xd9, 0x00, 0xff, 0xff, 0xe2, 0x33, 0xff, 0xff, 0xf3, 0x9c, 0xff, 0xff, 0xfc, 0xcd, 0xff, 0xff, 0xfb, 0xc4, 0xff, 0xff, 0xfb, 0xc3, 0xff, 0xff, 0xfc, 0xc9, 0xff, 0xff, 0xfd, 0xcc, 0xff, 0xff, 0xfd, 0xcb, 0xff, 0xff, 0xfd, 0xcb, 0xff, 0xff, 0xfd, 0xcc, 0xff, 0xff, 0xfc, 0xc9, 0xff, 0xff, 0xfb, 0xc3, 0xff, 0xff, 0xfb, 0xc4, 0xff, 0xff, 0xfc, 0xcd, 0xff, 0xff, 0xf3, 0x9c, 0xff, 0xff, 0xe2, 0x33, 0xff, 0xff, 0xd9, 0x00, 0xff, 0xff, 0xd8, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xd5, 0x00, 0xff, 0xd8, 0x89, 0x00, 0xff, 0x90, 0x51, 0x01, 0xff, 0x5b, 0x2d, 0x06, 0xff, 0x47, 0x1e, 0x06, 0xff, 0x43, 0x1d, 0x06, 0xa6, 0x34, 0x12, 0x04, 0xe0, 0x59, 0x2b, 0x05, 0xff, 0xa0, 0x60, 0x00, 0xff, 0xba, 0x88, 0x00, 0xff, 0xbf, 0x8f, 0x00, 0xff, 0xbd, 0x8d, 0x00, 0xff, 0xbd, 0x8c, 0x00, 0xff, 0xbe, 0x89, 0x00, 0xff, 0xba, 0x98, 0x4d, 0xff, 0xb7, 0xa2, 0x81, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa0, 0x79, 0xff, 0xb7, 0xa2, 0x81, 0xff, 0xba, 0x98, 0x4d, 0xff, 0xbe, 0x89, 0x00, 0xff, 0xbd, 0x8c, 0x00, 0xff, 0xbd, 0x8d, 0x00, 0xff, 0xbf, 0x8f, 0x00, 0xff, 0xba, 0x88, 0x00, 0xff, 0xa0, 0x60, 0x00, 0xff, 0x59, 0x2b, 0x05, 0xff, 0x34, 0x12, 0x04, 0xe0, 0x43, 0x1d, 0x06, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x44, 0x1c, 0x05, 0xa1, 0x47, 0x1e, 0x05, 0xff, 0x3c, 0x19, 0x06, 0xff, 0x3b, 0x16, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x14, 0x01, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x00, 0xff, 0x3b, 0x14, 0x01, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x15, 0x06, 0xff, 0x3b, 0x16, 0x06, 0xff, 0x3c, 0x19, 0x06, 0xff, 0x47, 0x1e, 0x05, 0xff, 0x44, 0x1c, 0x05, 0xa1, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00
};

//! 16x16 RGBA32 Image of a gauntlet
static const unsigned char gauntlet_cursor_rgba32[] = {
    0x24, 0x26, 0x2b, 0xff, 0x3b, 0x3f, 0x47, 0xff, 0x18, 0x1b, 0x1b, 0x40,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x3a, 0x3c, 0x3c, 0x6d,
    0x1b, 0x1e, 0x1e, 0x80, 0x1f, 0x23, 0x23, 0x3a, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00,
    0xff, 0xff, 0xff, 0x00, 0x1d, 0x1f, 0x20, 0xd4, 0x65, 0x74, 0x82, 0xff,
    0x46, 0x4c, 0x51, 0xff, 0x1c, 0x20, 0x20, 0xf4, 0x28, 0x2a, 0x2d, 0xf7,
    0x44, 0x4a, 0x51, 0xff, 0x34, 0x3b, 0x42, 0xff, 0x23, 0x27, 0x2a, 0xf8,
    0x2f, 0x33, 0x3a, 0x33, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00, 0x35, 0x3a, 0x40, 0x2b,
    0x30, 0x38, 0x40, 0xff, 0x9b, 0xa2, 0xa9, 0xff, 0x42, 0x4b, 0x57, 0xff,
    0x65, 0x6c, 0x73, 0xff, 0x49, 0x4b, 0x50, 0xff, 0x5d, 0x66, 0x6d, 0xff,
    0x30, 0x39, 0x40, 0xff, 0x1c, 0x1f, 0x22, 0xff, 0x2e, 0x32, 0x3b, 0x47,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x1b, 0x1b, 0x1e, 0x7d, 0x4d, 0x55, 0x5a, 0xff,
    0xa0, 0xa6, 0xac, 0xff, 0x35, 0x3e, 0x47, 0xff, 0x92, 0x97, 0x9c, 0xff,
    0x89, 0x8d, 0x90, 0xff, 0x91, 0x9e, 0xa7, 0xff, 0x47, 0x53, 0x5f, 0xff,
    0x1e, 0x21, 0x23, 0xcb, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00,
    0xff, 0xff, 0xff, 0x00, 0x5a, 0x5a, 0x5a, 0x00, 0x5e, 0x63, 0x6a, 0x80,
    0x36, 0x3f, 0x46, 0xff, 0x51, 0x5b, 0x68, 0xff, 0xbf, 0xc1, 0xc3, 0xff,
    0xc2, 0xc7, 0xcc, 0xff, 0x7a, 0x86, 0x96, 0xff, 0x34, 0x3c, 0x44, 0xff,
    0x19, 0x1c, 0x1c, 0xff, 0x12, 0x12, 0x12, 0xff, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00, 0x7c, 0x7c, 0x7c, 0x00,
    0x3f, 0x48, 0x4c, 0xff, 0x29, 0x2f, 0x35, 0xff, 0x4c, 0x56, 0x60, 0xff,
    0x65, 0x72, 0x7e, 0xff, 0xc0, 0xc6, 0xcb, 0xff, 0xc7, 0xca, 0xcc, 0xff,
    0x67, 0x6f, 0x7a, 0xff, 0x24, 0x28, 0x2a, 0xff, 0x16, 0x18, 0x1a, 0xff,
    0x24, 0x28, 0x2d, 0x40, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00,
    0x7c, 0x7c, 0x7c, 0x00, 0x3c, 0x46, 0x4c, 0xff, 0x1a, 0x1d, 0x1f, 0xff,
    0x47, 0x4e, 0x55, 0xff, 0x4d, 0x58, 0x61, 0xff, 0xa5, 0xad, 0xb5, 0xff,
    0xcc, 0xce, 0xce, 0xff, 0x83, 0x8c, 0x99, 0xff, 0x2b, 0x32, 0x38, 0xff,
    0x33, 0x3b, 0x42, 0xff, 0x3b, 0x41, 0x49, 0xb0, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00,
    0xff, 0xff, 0xff, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x38, 0x42, 0x4b, 0xff,
    0x4e, 0x57, 0x60, 0xff, 0x16, 0x16, 0x18, 0xff, 0x7b, 0x83, 0x8b, 0xff,
    0x6b, 0x78, 0x85, 0xff, 0xcc, 0xce, 0xcf, 0xff, 0x9a, 0xa1, 0xa5, 0xff,
    0x2e, 0x34, 0x39, 0xff, 0x2f, 0x37, 0x3a, 0xff, 0x38, 0x3f, 0x44, 0xff,
    0x22, 0x22, 0x24, 0x40, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x13, 0x13, 0x14, 0x47, 0x23, 0x28, 0x2a, 0xff, 0x24, 0x2a, 0x2d, 0xff,
    0x82, 0x89, 0x8e, 0xff, 0x47, 0x52, 0x5d, 0xff, 0x92, 0x9c, 0xa6, 0xff,
    0xa1, 0xa5, 0xab, 0xff, 0x6b, 0x70, 0x74, 0xff, 0x5d, 0x6f, 0x7b, 0xff,
    0x80, 0x8b, 0x99, 0xff, 0x40, 0x49, 0x54, 0xff, 0x28, 0x28, 0x31, 0x40,
    0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x1f, 0x22, 0x25, 0x49,
    0x20, 0x25, 0x27, 0xff, 0x54, 0x5e, 0x67, 0xff, 0x39, 0x42, 0x4c, 0xff,
    0x4b, 0x55, 0x61, 0xff, 0x9f, 0xa3, 0xa7, 0xff, 0x94, 0x97, 0x9a, 0xff,
    0x58, 0x60, 0x69, 0xff, 0x64, 0x75, 0x7e, 0xff, 0x72, 0x7d, 0x89, 0xff,
    0x28, 0x2f, 0x3e, 0xff, 0x1d, 0x20, 0x20, 0x40, 0xbc, 0xbc, 0xbc, 0x00,
    0xff, 0xff, 0xff, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x49, 0x28, 0x2e, 0x36, 0xff,
    0x29, 0x2c, 0x31, 0xff, 0x7e, 0x8a, 0x95, 0xff, 0xb5, 0xb8, 0xbb, 0xff,
    0xae, 0xb2, 0xb2, 0xff, 0x66, 0x6f, 0x78, 0xff, 0x30, 0x38, 0x40, 0xff,
    0x51, 0x61, 0x68, 0xff, 0x41, 0x4e, 0x57, 0xff, 0x1d, 0x22, 0x24, 0xff,
    0x1d, 0x20, 0x21, 0x57, 0xff, 0xff, 0xff, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x47, 0x3f, 0x48, 0x50, 0xff, 0x44, 0x52, 0x5f, 0xff,
    0xaf, 0xb3, 0xb8, 0xff, 0xb2, 0xb6, 0xb8, 0xff, 0xa0, 0xa2, 0xa4, 0xff,
    0x46, 0x4e, 0x57, 0xff, 0x2c, 0x34, 0x39, 0xff, 0x29, 0x32, 0x37, 0xff,
    0x19, 0x1b, 0x1e, 0xff, 0x11, 0x11, 0x11, 0x80, 0xff, 0xff, 0xff, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x1e, 0x20, 0x21, 0xbf,
    0x23, 0x25, 0x28, 0xff, 0x74, 0x7d, 0x85, 0xff, 0xa5, 0xa9, 0xac, 0xff,
    0x61, 0x66, 0x6a, 0xff, 0x16, 0x16, 0x18, 0xff, 0x1a, 0x1b, 0x1c, 0xff,
    0x21, 0x24, 0x25, 0xff, 0x1a, 0x1d, 0x1d, 0xff, 0x11, 0x11, 0x11, 0x7e,
    0xff, 0xff, 0xff, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x24, 0x28, 0x29, 0x38, 0x1a, 0x1b, 0x1c, 0xff, 0x3c, 0x43, 0x49, 0xff,
    0x2d, 0x32, 0x37, 0xff, 0x1d, 0x1f, 0x22, 0xff, 0x21, 0x27, 0x2a, 0xff,
    0x24, 0x27, 0x2a, 0xff, 0x20, 0x22, 0x23, 0xff, 0x15, 0x15, 0x18, 0xd3,
    0x11, 0x11, 0x11, 0x15, 0xff, 0xff, 0xff, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x19, 0x19, 0x1d, 0xab,
    0x22, 0x24, 0x28, 0xff, 0x25, 0x2a, 0x2f, 0xff, 0x32, 0x3e, 0x48, 0xff,
    0x38, 0x40, 0x49, 0xff, 0x1e, 0x1f, 0x23, 0xff, 0x13, 0x13, 0x15, 0xaa,
    0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xff, 0xff, 0xff, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00,
    0x12, 0x12, 0x14, 0x3b, 0x12, 0x13, 0x13, 0xcb, 0x1d, 0x1f, 0x23, 0xff,
    0x22, 0x28, 0x2d, 0xff, 0x14, 0x15, 0x16, 0xd4, 0x1d, 0x1d, 0x22, 0x3e,
    0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11, 0x00, 0xbc, 0xbc, 0xbc, 0x00,
    0xff, 0xff, 0xff, 0x00
};

using namespace gdk;

std::shared_ptr<glfw_window> glfw_window::make(const std::string_view aName) {
    return std::shared_ptr<glfw_window>(new glfw_window(aName, {400, 300}));
}

void glfw_window::poll_events() {
    glfwPollEvents();
}

void glfw_window::swap_buffers() {
    glfwSwapBuffers(m_pGLFWWindow.get());
}

glfw_window::glfw_window(const std::string_view aName, const window_size_type &aScreenSize)
: m_pGLFWWindow([&]() {        
    glfwSetErrorCallback([](int, const char *msg) {
        throw std::runtime_error(std::string(TAG).append("/").append(msg));
    });

    static std::once_flag glfwInitFlag;
    std::call_once(glfwInitFlag, []() {
        if (!glfwInit()) throw std::runtime_error(std::string(TAG).append("/glfwInit failed"));

        glfwWindowHint(GLFW_DOUBLEBUFFER, GLFW_TRUE);
        glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
    });

    if (GLFWwindow *const pWindow = glfwCreateWindow(aScreenSize.first, aScreenSize.second, aName.data(), nullptr, nullptr)) {
        glfwMakeContextCurrent(pWindow);

        // Vsync controller. if not called, the interval is platform dependent. 0 is off. 
        // negative values allow for swapping even if the backbuffer arrives late (vendor extension dependent).
        glfwSwapInterval(-1); 

#if !defined JFC_TARGET_PLATFORM_Emscripten
        //! if the mouse is locked, then use unaccellerated mouse input
        if (glfwRawMouseMotionSupported()) glfwSetInputMode(pWindow, GLFW_RAW_MOUSE_MOTION, GLFW_TRUE);
#endif

        glClearColor(0, 0, 0, 1);
        glClear(GL_COLOR_BUFFER_BIT);
        glfwSwapBuffers(pWindow); //Must be called once to see the buffer we cleared
        glfwPollEvents(); //Must be called once for window to render

        glfwSetWindowUserPointer(pWindow, static_cast<void *>(this));
            
        glfwSetWindowSizeCallback(pWindow, [](GLFWwindow *const pCurrentGLFWwindow, int aX, int aY) {
            if (auto pCurrentWrapper = static_cast<glfw_window *const>(glfwGetWindowUserPointer(pCurrentGLFWwindow))) {
                pCurrentWrapper->m_WindowSize.first =  aX;
                pCurrentWrapper->m_WindowSize.second = aY;
            }
            else throw std::runtime_error(std::string(TAG).append("/wrapper associated with current glfw window instance is null"));
        });

        glfwSetWindowCloseCallback(pWindow, [](GLFWwindow *const pCurrentWindow) {
            glfwSetWindowShouldClose(pCurrentWindow, GLFW_TRUE);
        });

#if defined JFC_TARGET_PLATFORM_Linux || defined JFC_TARGET_PLATFORM_Windows
        static std::once_flag glewInitFlag;
        std::call_once(glewInitFlag, []() {
            glewExperimental = true; //Required on a Linux (Ubuntu 18.04.1 LTS) x86 32bit system

            if (GLenum err = glewInit() != GLEW_OK) {
                std::stringstream ss;
                ss << TAG << "/glewinit failed: " << glewGetErrorString(err);
                throw std::runtime_error(ss.str()); 
            }
        });
#endif

        return pWindow;
    }
    else throw std::runtime_error(std::string(TAG).append(
        "/glfwCreateWindow failed. Can the environment provide a GLES2.0/WebGL1.0 context?"));
}()
,[](GLFWwindow *const ptr) {
    glfwDestroyWindow(ptr);
})
, m_Name(aName)
, m_WindowSize(aScreenSize.first, aScreenSize.second) {

    {
        cursor_image_type image;
        for (int i(0); i < (16 * 16 * 4);++i) image[i] = gauntlet_cursor_rgba32[i];
        set_cursor(image);
    }

    {
        icon_image_type icon;
        icon.width_pixels = 32;
        icon.height_pixels = 32;
        
        for (int i(0); i < (32 * 32 * 4);++i) icon.data_rgba32.push_back(static_cast<std::byte>(window_icon_rgba32[i]));

        set_icons({icon});
    }
}

glfw_window::window_pointer_type glfw_window::ptr_to_implementation() { return m_pGLFWWindow; }

glfw_window::window_size_type glfw_window::window_size() const {
    return m_WindowSize;
}

glfw_window::window_aspect_ratio_type glfw_window::aspect_ratio() const {
    return 
		static_cast<window_aspect_ratio_type>(m_WindowSize.first) /
		static_cast<window_aspect_ratio_type>(m_WindowSize.second);
}

glfw_window::cursor_position_type glfw_window::cursor_position() const {
    double x,y;
    glfwGetCursorPos(m_pGLFWWindow.get(), &x, &y);

    return cursor_position_type(
        static_cast<cursor_position_type::first_type>(x), 
        static_cast<cursor_position_type::second_type>(y));
}

std::string_view glfw_window::name() const {
    return m_Name;
}

bool glfw_window::should_close() const {
    return glfwWindowShouldClose(m_pGLFWWindow.get());
}

void glfw_window::close() {
	glfwSetWindowShouldClose(m_pGLFWWindow.get(), true);
}

void glfw_window::set_icons(const icon_image_collection_type &aIconImages) {
    std::vector<GLFWimage> glfwImages;

    for (const auto &iconImage : aIconImages)
    {
        GLFWimage image;
        image.width = iconImage.width_pixels;
        image.height = iconImage.height_pixels;
        image.pixels = const_cast<unsigned char *>(reinterpret_cast<const unsigned char *>(&iconImage.data_rgba32[0]));

        glfwImages.push_back(std::move(image));
    }

    glfwSetWindowIcon(m_pGLFWWindow.get(), aIconImages.size(), &glfwImages[0]);
}

void glfw_window::set_cursor(const cursor_image_type &aRGBA32PNG) {
    GLFWimage image;
    image.width = 16;
    image.height = 16;
    image.pixels = const_cast<unsigned char *>(reinterpret_cast<const unsigned char *>(&aRGBA32PNG[0]));
    
    m_pGLFWCursor = decltype(m_pGLFWCursor)(
        glfwCreateCursor(&image, 0, 0),
        [](GLFWcursor *p) {
            if (p) glfwDestroyCursor(p);
        });

    glfwSetCursor(m_pGLFWWindow.get(), m_pGLFWCursor.get());
}

void glfw_window::set_cursor(const standard_cursor_graphic cursor) {
    decltype(GLFW_ARROW_CURSOR) glfwStandardCursor;

    switch(cursor) {
        case standard_cursor_graphic::arrow: glfwStandardCursor = GLFW_ARROW_CURSOR; break;
        case standard_cursor_graphic::ibeam: glfwStandardCursor = GLFW_IBEAM_CURSOR; break;
        case standard_cursor_graphic::crosshair: glfwStandardCursor = GLFW_CROSSHAIR_CURSOR; break;
        case standard_cursor_graphic::hand: glfwStandardCursor = GLFW_HAND_CURSOR; break;
        case standard_cursor_graphic::horizontal_resizer: glfwStandardCursor = GLFW_HRESIZE_CURSOR; break;
        case standard_cursor_graphic::vertical_resizer: glfwStandardCursor = GLFW_VRESIZE_CURSOR; break;
        
        default: throw std::invalid_argument("unhandled standard_cursor_graphic type");
    }

    m_pGLFWCursor = decltype(m_pGLFWCursor)(
        glfwCreateStandardCursor(glfwStandardCursor),
        [](GLFWcursor *p) {
            if (p) glfwDestroyCursor(p);
        });

    glfwSetCursor(m_pGLFWWindow.get(), m_pGLFWCursor.get());
}

